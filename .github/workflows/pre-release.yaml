name: Pre-release

# Prepares a new releas
#
# To trigger it, simply change the CHANGELOG.md file, replacing the
# "Unreleased" header with the header with the new release's
# version number.
#
# The workflow will automatically prepare a pull request for the release
#

on:
  push:
    branches: [main]

jobs:

  versions:
    runs-on: ubuntu-latest
    name: Get version numbers
    outputs:
      released-version: ${{ steps.current-release.outputs.result }}
      next-version: ${{ steps.next-release.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: read the current release version from git tags
        id: current-release
        run: |
          git fetch --tags
          version_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          version=${version_tag/v/}
          echo "::set-output name=result::$version"
      - name: read latest version from the changelog
        id: next-release-from-changelog
        uses: mattwynne/changelog-action@v1.2
        with:
          args: latest
      - name: Parse version number from changelog release name
        id: next-release
        run: |
          version_heading=${{ steps.next-release-from-changelog.outputs.output }}
          version=${version_heading/v}
          echo "::set-output name=result::$version"
      - name: Report version numbers detected
        run: |
          echo "Released: ${{ steps.current-release.outputs.result }}"
          echo "Next:     ${{ steps.next-release.outputs.result }}"

  create-release-pr:
    runs-on: ubuntu-latest
    name: Create / Update Release PR
    needs: versions
    if: needs.versions.outputs.released-version != needs.versions.outputs.next-version
    env:
      next_version: ${{ needs.versions.outputs.next-version }}
      released_version: ${{ needs.versions.outputs.released-version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create/update target branch for release, based on previous release
        run: |
          git checkout v${{ env.released_version }}
          git checkout -b release/v${{ env.next_version }}
          git push --force --set-upstream origin release/v${{ env.next_version }}
      - name: Create/update a branch off `main` for the commit to be released
        run: |
          git checkout ${{ github.ref }}
          git checkout -b pre-release/v${{ env.next_version }}
          git push --force --set-upstream origin pre-release/v${{ env.next_version }}
      - name: Check for existing PR for this release
        id: pr-already-exists
        run: |
          output=$(gh pr list --base release/v${{ env.next_version }})
          exists=$([[ $output == *"Release v${{ env.next_version }}"* ]] && echo "exists" || echo "")
          echo "::set-output name=result::$exists"
      - name: Create Pull Request
        if: ${{ !steps.pr-already-exists.outputs.result }}
        run: |
          ref="${{ github.ref }}"
          branch=${ref/refs\/heads\//}
          cat >${{ runner.temp }}/body <<EOT
          Auto-generated by the [pre-release.yaml](https://github.com/${{ github.repository }}/blob/main/.github/workflows/pre-release.yaml) workflow, because the CHANGELOG.md
          file contains a header for v${{ env.next_version }}.

          The latest git tag is v${{ env.released_version }}, so it looks like a release is needed.

          Review this PR carefully. When it's merged, the v${{ env.next_version }} release will happen automatically.

          If you need to make changes to this release, just push more commits to the \`${branch}\` branch and this PR will be automatically updated.
          EOT
          gh pr create \
            --base release/v${{ env.next_version }} \
            --head pre-release/v${{ env.next_version }} \
            --title "Release v${{ env.next_version }}" \
            --body-file ${{ runner.temp }}/body
